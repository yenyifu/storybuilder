"use client"

import { useEffect, useState } from "react"
import { Card } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Textarea } from "@/components/ui/textarea"
import { StoryChat } from "@/components/story-chat"
import { Sparkles, Send } from 'lucide-react'

export default function StoryBuilderPage() {
  const [hasStarted, setHasStarted] = useState(false)
  const [initialInput, setInitialInput] = useState("")
  const [story, setStory] = useState("")

  // load any previous draft
  useEffect(() => {
    try {
      const raw = localStorage.getItem("story_builder_draft")
      if (raw) {
        const data = JSON.parse(raw)
        if (data?.storyText) {
          setStory(data.storyText)
          setHasStarted(true)
        }
      }
    } catch {}
  }, [])

  // persist story
  useEffect(() => {
    try {
      const raw = localStorage.getItem("story_builder_draft")
      const prior = raw ? JSON.parse(raw) : {}
      localStorage.setItem(
        "story_builder_draft",
        JSON.stringify({ ...(prior || {}), storyText: story, ts: Date.now() }),
      )
    } catch {}
  }, [story])

  function handleFirstSend() {
    const text = initialInput.trim()
    if (!text) return
    setStory(text)
    setHasStarted(true)
  }

  // Phase 1: centered title + single textbox
  if (!hasStarted) {
    return (
      <main className="min-h-[calc(100vh-64px)] flex items-center justify-center px-4">
        <Card className="w-full max-w-3xl p-6 md:p-10">
          <div className="text-center mb-6">
            <div className="mx-auto mb-3 inline-flex h-12 w-12 items-center justify-center rounded-xl bg-[#FFEDBF]">
              <Sparkles className="h-6 w-6 text-[#403C4E]" />
            </div>
            <h1 className="text-2xl md:text-3xl font-bold text-[#403C4E]">Story builder</h1>
            <p className="mt-2 text-[#403C4E]/80">Just write and we will create your story together.</p>
          </div>

          <div className="relative">
            <Textarea
              value={initialInput}
              onChange={(e) => setInitialInput(e.target.value)}
              placeholder="Start your story here... Once upon a time..."
              className="h-64 md:h-80 text-base p-4 pr-16 focus-visible:ring-[#FFAD94]"
            />
            <Button
              onClick={handleFirstSend}
              className="absolute bottom-3 right-3 bg-[#FFAD94] hover:bg-[#FF9D82] text-[#403C4E]"
              aria-label="Send"
            >
              <Send className="h-4 w-4" />
            </Button>
          </div>
          <p className="mt-3 text-xs text-[#403C4E]/70 text-center">
            Tip: Press Enter to send. Use Shift+Enter for a new line.
          </p>
        </Card>
      </main>
    )
  }

  // Phase 2: two-panel layout (chat left, full-story editor right)
  return (
    <main className="h-[calc(100vh-64px)]">
      <div className="grid h-full min-h-0 grid-cols-1 md:grid-cols-2 gap-4 p-4">
        {/* Left: Chat + input */}
        <Card className="h-full flex flex-col min-h-0">
          <div className="border-b p-4">
            <h2 className="text-lg font-semibold text-[#403C4E]">Chat</h2>
            <p className="text-sm text-[#403C4E]/80">Talk with the helper to edit the story together.</p>
          </div>
          <StoryChat
            initialUserMessage={initialInput || undefined}
            onUserSend={(text) => {
              // Simple behavior for v1: append user text to the story
              setStory((prev) => (prev ? prev + "\n\n" + text : text))
            }}
          />
        </Card>

        {/* Right: Full story editor */}
        <Card className="h-full flex flex-col min-h-0">
          <div className="border-b p-4">
            <h2 className="text-lg font-semibold text-[#403C4E]">Your story</h2>
            <p className="text-sm text-[#403C4E]/80">Edit the story directly. Changes are saved as you type.</p>
          </div>

          <div className="flex-1 p-4 min-h-0">
            <div className="relative h-full min-h-0">
              <Textarea
                value={story}
                onChange={(e) => setStory(e.target.value)}
                placeholder="Edit your full story here..."
                className="h-full max-h-full text-base p-4 resize-none focus-visible:ring-[#FFAD94]"
              />
            </div>
          </div>
        </Card>
      </div>
    </main>
  )
}

"use client"

import { useEffect, useRef, useState } from "react"
import { Card } from "@/components/ui/card"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Textarea } from "@/components/ui/textarea"
import { Button } from "@/components/ui/button"
import { Avatar, AvatarFallback } from "@/components/ui/avatar"
import { Loader2, Send } from 'lucide-react'
import { cn } from "@/lib/utils"

type ChatMessage = {
  id: string
  role: "assistant" | "user"
  content: string
}

export function StoryChat({
  onUserSend,
  initialUserMessage,
}: {
  onUserSend: (text: string) => void
  initialUserMessage?: string
}) {
  const [messages, setMessages] = useState<ChatMessage[]>([
    {
      id: "m-hello",
      role: "assistant",
      content:
        "Hi! I’m here to help craft your story. You can keep writing in the editor, or tell me how you’d like the story to change.",
    },
  ])
  const [input, setInput] = useState("")
  const [isThinking, setIsThinking] = useState(false)
  const scrollRef = useRef<HTMLDivElement>(null)
  const seededRef = useRef(false)

  // Seed with the initial user message (from the first screen), once
  useEffect(() => {
    if (seededRef.current) return
    const first = (initialUserMessage || "").trim()
    if (first) {
      seededRef.current = true
      const userMsg: ChatMessage = {
        id: crypto.randomUUID(),
        role: "user",
        content: first,
      }
      const ack: ChatMessage = {
        id: crypto.randomUUID(),
        role: "assistant",
        content: "Great start! That’s in your story. Want me to add a setting or describe the main character next?",
      }
      setMessages((m) => [...m, userMsg, ack])
    }
  }, [initialUserMessage])

  // Auto-scroll
  useEffect(() => {
    scrollRef.current?.scrollTo({
      top: scrollRef.current.scrollHeight,
      behavior: "smooth",
    })
  }, [messages, isThinking])

  function handleSend() {
    const text = input.trim()
    if (!text) return

    const userMsg: ChatMessage = { id: crypto.randomUUID(), role: "user", content: text }
    setMessages((prev) => [...prev, userMsg])
    setInput("")
    onUserSend(text)

    // Simulate assistant thinking and reply
    setIsThinking(true)
    setTimeout(() => {
      const reply: ChatMessage = {
        id: crypto.randomUUID(),
        role: "assistant",
        content:
          "I updated the story with your new ideas. If you'd like, say “add more detail about the setting” or “make the ending happier.”",
      }
      setMessages((prev) => [...prev, reply])
      setIsThinking(false)
    }, 600)
  }

  return (
    <div className="flex h-[calc(100%-0px)] flex-col">
      <ScrollArea className="flex-1" ref={scrollRef as any}>
        <div className="p-4 space-y-3">
          {messages.map((m) => (
            <div
              key={m.id}
              className={cn("flex items-start gap-3", m.role === "user" ? "justify-end" : "justify-start")}
            >
              {m.role === "assistant" && (
                <Avatar className="h-7 w-7">
                  <AvatarFallback className="bg-[#FFAD94] text-[#403C4E] text-[10px]">AI</AvatarFallback>
                </Avatar>
              )}
              <Card
                className={cn(
                  "px-3 py-2 text-sm max-w-[80%]",
                  m.role === "assistant"
                    ? "bg-[#FFD1CC] border-[#FFD1CC] text-[#403C4E]"
                    : "bg-white text-[#403C4E]",
                )}
              >
                <p className="whitespace-pre-wrap">{m.content}</p>
              </Card>
              {m.role === "user" && (
                <Avatar className="h-7 w-7">
                  <AvatarFallback className="bg-gray-200 text-[#403C4E] text-[10px]">You</AvatarFallback>
                </Avatar>
              )}
            </div>
          ))}
          {isThinking && (
            <div className="flex items-center gap-2 text-sm text-[#403C4E]">
              <Loader2 className="h-4 w-4 animate-spin" />
              Thinking...
            </div>
          )}
        </div>
      </ScrollArea>

      <div className="border-t p-3">
        <div className="relative">
          <Textarea
            aria-label="Chat input"
            placeholder="Ask the helper to add details, change tone, or continue the story..."
            className="min-h-28 h-28 max-h-[40vh] resize-y text-base p-4 pr-14 focus-visible:ring-[#FFAD94]"
            value={input}
            onChange={(e) => setInput(e.target.value)}
            onKeyDown={(e) => {
              if (e.key === "Enter" && !e.shiftKey) {
                e.preventDefault()
                handleSend()
              }
            }}
          />
          <Button
            onClick={handleSend}
            className="absolute bottom-3 right-3 bg-[#FFAD94] hover:bg-[#FF9D82] text-[#403C4E]"
            aria-label="Send"
          >
            <Send className="h-4 w-4" />
          </Button>
        </div>
      </div>
    </div>
  )
}
